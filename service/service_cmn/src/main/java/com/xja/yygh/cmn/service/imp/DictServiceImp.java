package com.xja.yygh.cmn.service.imp;import com.alibaba.excel.EasyExcel;import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;import com.baomidou.mybatisplus.core.toolkit.Wrappers;import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;import com.xja.yygh.cmn.listener.DictListener;import com.xja.yygh.cmn.mapper.DictMapper;import com.xja.yygh.cmn.service.DictService;import com.xja.yygh.model.cmn.Dict;import com.xja.yygh.vo.cmn.DictEeVo;import org.springframework.beans.BeanUtils;import org.springframework.cache.annotation.Cacheable;import org.springframework.stereotype.Service;import org.springframework.util.StringUtils;import org.springframework.web.multipart.MultipartFile;import javax.servlet.http.HttpServletResponse;import java.io.IOException;import java.net.URLEncoder;import java.util.ArrayList;import java.util.List;/** * @Author xiaoYan * @Data 2022/12/4 11:29 * 时间不早了  注意休息 */@Servicepublic class DictServiceImp extends ServiceImpl<DictMapper, Dict> implements DictService {    //判断id下面是否有子节点    private boolean isChildren(Long id) {        QueryWrapper<Dict> wrapper = new QueryWrapper<>();        wrapper.eq("parent_id",id);        Integer count = baseMapper.selectCount(wrapper);        // 0>0    1>0        return count>0;    }    //根据数据id查询子数据列表    @Override    @Cacheable(value = "dict" ,keyGenerator = "keyGenerator")    public List<Dict> findChlidData(Long id) {        QueryWrapper<Dict> wrapper = new QueryWrapper<>();        wrapper.eq("parent_id",id);        List<Dict> dictList = baseMapper.selectList(wrapper);        //向list集合每个dict对象中设置hasChildren        for (Dict dict:dictList) {            Long dictId = dict.getId();            boolean isChild = this.isChildren(dictId);            dict.setHasChildren(isChild);        }        return dictList;    }    @Override    public void exportData(HttpServletResponse response) {        try {            response.setContentType("application/vnd.ms-excel");            response.setCharacterEncoding("utf-8");            // 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系            String fileName = URLEncoder.encode("数据字典", "UTF-8");            response.setHeader("Content-disposition", "attachment;filename=" + fileName + ".xlsx");            List<Dict> dictList = baseMapper.selectList(null);            List<DictEeVo> dictVoList = new ArrayList<>(dictList.size());            //转vo对象            for (Dict dict : dictList) {                DictEeVo dictVo = new DictEeVo();                BeanUtils.copyProperties(dict, dictVo, DictEeVo.class);                dictVoList.add(dictVo);            }            EasyExcel.write(response.getOutputStream(), DictEeVo.class).sheet("数据字典").doWrite(dictVoList);        } catch (IOException e) {            e.printStackTrace();        }    }    /**     * 导入     * allEntries = true: 方法调用后清空所有缓存     * @param file     */    @Override    public void importDictData(MultipartFile file) {        try {            EasyExcel.read(file.getInputStream(),DictEeVo.class,new DictListener(baseMapper)).sheet().doRead();        } catch (IOException e) {            e.printStackTrace();        }    }    /**     * 根据上级编码与值获取数据字典名称     * @param value     * @return     */    @Cacheable(value = "dict",keyGenerator = "keyGenerator")    @Override    public String getNameByParentDictCodeAndValue(String dictCode, String value) {        //如果dictCode为空 直接根据value查询        if (StringUtils.isEmpty(dictCode)) {            LambdaQueryWrapper<Dict> lqw = Wrappers.lambdaQuery();            lqw.eq(Dict::getValue, value);            //根据value查询             return baseMapper.selectOne(lqw).getName();        }else {            //如果dictCode不为null 根据dictCode和value 查询            //根据dictcode查询dict对象 得到dict的id值            Dict codeDict  =   this.getDictByDictCode(dictCode);            Long parentId = codeDict.getId();            //根据id和value进行查            QueryWrapper<Dict> qwr =new QueryWrapper<>();            qwr.eq("parent_id",parentId);            qwr.eq("value",value);            Dict dict = baseMapper.selectOne(qwr);            return dict.getName();        }    }    @Override    public List<Dict> findByDictCode(String dictCode) {        //根据code获取对象        Dict codeDict = this.getDictByDictCode(dictCode);        if(null == codeDict) {            return null;        }        //获取当前地区的所有地方        return this.findChlidData(codeDict.getId());    }    private Dict getDictByDictCode(String dictCode) {        return baseMapper.selectOne(new LambdaQueryWrapper<Dict>().eq(Dict::getDictCode,dictCode));    }}