package com.xja.yygh.order.service.imp;import com.alibaba.fastjson.JSONObject;import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;import com.baomidou.mybatisplus.core.metadata.IPage;import com.baomidou.mybatisplus.extension.plugins.pagination.Page;import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;import com.xja.yygh.common.exception.YyghException;import com.xja.yygh.common.helper.HttpRequestHelper;import com.xja.yygh.common.result.ResultCodeEnum;import com.xja.yygh.common.util.MD5;import com.xja.yygh.enums.OrderStatusEnum;import com.xja.yygh.hosp.client.HospitalFeignClient;import com.xja.yygh.model.order.OrderInfo;import com.xja.yygh.model.user.Patient;import com.xja.yygh.order.mapper.OrderMapper;import com.xja.yygh.order.service.OrderService;import com.xja.yygh.order.service.WeixinService;import com.xja.yygh.rabbit.common.constant.MqConst;import com.xja.yygh.rabbit.common.service.RabbitService;import com.xja.yygh.user.client.PatientFeignClient;import com.xja.yygh.vo.hosp.ScheduleOrderVo;import com.xja.yygh.vo.msm.MsmVo;import com.xja.yygh.vo.order.*;import org.joda.time.DateTime;import org.springframework.beans.BeanUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import org.springframework.util.StringUtils;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.Random;import java.util.stream.Collectors;/** * @Author xiaoYan * @Data 2022/12/22 15:05 * 时间不早了  注意休息 */@Servicepublic class OrderServiceImpl extends        ServiceImpl<OrderMapper, OrderInfo> implements OrderService {    @Autowired    private PatientFeignClient patientFeignClient;    @Autowired    private HospitalFeignClient hospitalFeignClient;    @Autowired    private RabbitService rabbitService;    @Autowired    private WeixinService weixinService;    @Transactional(rollbackFor = Exception.class)    //保存订单    @Override    public Long saveOrder(String scheduleId, Long patientId) {        // 获取就诊人信息        Patient patient = patientFeignClient.getPatient(patientId);        if(null == patient) {            throw new YyghException(ResultCodeEnum.PARAM_ERROR);        }        // 获取当前排班相关信息        ScheduleOrderVo scheduleOrderVo = hospitalFeignClient.getScheduleOrderVo(scheduleId);        if(null == scheduleOrderVo) {            throw new YyghException(ResultCodeEnum.PARAM_ERROR);        }        //当前时间是否可以预约        if(new DateTime(scheduleOrderVo.getStartTime()).isAfterNow()                || new DateTime(scheduleOrderVo.getEndTime()).isBeforeNow()) {            throw new YyghException(ResultCodeEnum.TIME_NO);        }        // 签名信息        SignInfoVo signInfoVo = hospitalFeignClient.getSignInfoVo(scheduleOrderVo.getHoscode());        if(null == scheduleOrderVo) {            throw new YyghException(ResultCodeEnum.PARAM_ERROR);        }        if(scheduleOrderVo.getAvailableNumber() <= 0) {            throw new YyghException(ResultCodeEnum.NUMBER_NO);        }        OrderInfo orderInfo = new OrderInfo();        BeanUtils.copyProperties(scheduleOrderVo, orderInfo);        String outTradeNo = System.currentTimeMillis() + ""+ new Random().nextInt(100);        orderInfo.setOutTradeNo(outTradeNo);        orderInfo.setScheduleId(scheduleOrderVo.getHosScheduleId());        orderInfo.setUserId(patient.getUserId());        orderInfo.setPatientId(patientId);        orderInfo.setPatientName(patient.getName());        orderInfo.setPatientPhone(patient.getPhone());        orderInfo.setOrderStatus(OrderStatusEnum.UNPAID.getStatus());        this.save(orderInfo);        Map<String, Object> paramMap = new HashMap<>();        paramMap.put("hoscode",orderInfo.getHoscode());        paramMap.put("depcode",orderInfo.getDepcode());        paramMap.put("hosScheduleId",orderInfo.getScheduleId());        paramMap.put("reserveDate",new DateTime(orderInfo.getReserveDate()).toString("yyyy-MM-dd"));        paramMap.put("reserveTime", orderInfo.getReserveTime());        paramMap.put("amount",orderInfo.getAmount());        paramMap.put("name", patient.getName());        paramMap.put("certificatesType",patient.getCertificatesType());        paramMap.put("certificatesNo", patient.getCertificatesNo());        paramMap.put("sex",patient.getSex());        paramMap.put("birthdate", patient.getBirthdate());        paramMap.put("phone",patient.getPhone());        paramMap.put("isMarry", patient.getIsMarry());        paramMap.put("provinceCode",patient.getProvinceCode());        paramMap.put("cityCode", patient.getCityCode());        paramMap.put("districtCode",patient.getDistrictCode());        paramMap.put("address",patient.getAddress());        //联系人        paramMap.put("contactsName",patient.getContactsName());        paramMap.put("contactsCertificatesType", patient.getContactsCertificatesType());        paramMap.put("contactsCertificatesNo",patient.getContactsCertificatesNo());        paramMap.put("contactsPhone",patient.getContactsPhone());        paramMap.put("timestamp", HttpRequestHelper.getTimestamp());        paramMap.put("sign", MD5.encrypt(signInfoVo.getSignKey()));        JSONObject result = HttpRequestHelper.sendRequest(paramMap, signInfoVo.getApiUrl()+"/order/submitOrder");        System.out.println("result = " + result);        if(result.getInteger("code") == 200) {            JSONObject jsonObject = result.getJSONObject("data");            //预约记录唯一标识（医院预约记录主键）            String hosRecordId = jsonObject.getString("hosRecordId");            //预约序号            Integer number = jsonObject.getInteger("number");;            //取号时间            String fetchTime = jsonObject.getString("fetchTime");;            //取号地址            String fetchAddress = jsonObject.getString("fetchAddress");;            //更新订单            orderInfo.setHosRecordId(hosRecordId);            orderInfo.setNumber(number);            orderInfo.setFetchTime(fetchTime);            orderInfo.setFetchAddress(fetchAddress);            baseMapper.updateById(orderInfo);            //排班可预约数            Integer reservedNumber = jsonObject.getInteger("reservedNumber");            //排班剩余预约数            Integer availableNumber = jsonObject.getInteger("availableNumber");            //发送mq信息更新号源和短信通知            //发送mq信息更新号源            OrderMqVo orderMqVo = new OrderMqVo();            orderMqVo.setScheduleId(scheduleId);            orderMqVo.setReservedNumber(reservedNumber);            orderMqVo.setAvailableNumber(availableNumber);            //短信提示            MsmVo msmVo = new MsmVo();            msmVo.setPhone(orderInfo.getPatientPhone());            msmVo.setTemplateCode(" ");            String reserveDate =                    new DateTime(orderInfo.getReserveDate()).toString("yyyy-MM-dd")                            + (orderInfo.getReserveTime()==0 ? "上午": "下午");            Map<String,Object> param = new HashMap<String,Object>(){{                put("title", orderInfo.getHosname()+"|"+orderInfo.getDepname()+"|"+orderInfo.getTitle());                put("amount", orderInfo.getAmount());                put("reserveDate", reserveDate);                put("name", orderInfo.getPatientName());                put("quitTime", new DateTime(orderInfo.getQuitTime()).toString("yyyy-MM-dd HH:mm"));            }};            msmVo.setParam(param);            orderMqVo.setMsmVo(msmVo);            rabbitService.sendMessage(MqConst.EXCHANGE_DIRECT_ORDER, MqConst.ROUTING_ORDER, orderMqVo);        } else {            throw new YyghException(result.getString("message"), ResultCodeEnum.FAIL.getCode());        }        return orderInfo.getId();    }    //订单列表（条件查询带分页）    @Override    public IPage<OrderInfo> selectPage(Page<OrderInfo> pageParam, OrderQueryVo orderQueryVo) {        //orderQueryVo获取条件值        String name = orderQueryVo.getKeyword(); //医院名称        Long patientId = orderQueryVo.getPatientId(); //就诊人名称        String orderStatus = orderQueryVo.getOrderStatus(); //订单状态        String reserveDate = orderQueryVo.getReserveDate();//安排时间        String createTimeBegin = orderQueryVo.getCreateTimeBegin();        String createTimeEnd = orderQueryVo.getCreateTimeEnd();        //对条件值进行非空判断        QueryWrapper<OrderInfo> wrapper = new QueryWrapper<>();        if(!StringUtils.isEmpty(name)) {            wrapper.like("hosname",name);        }        if(!StringUtils.isEmpty(patientId)) {            wrapper.eq("patient_id",patientId);        }        if(!StringUtils.isEmpty(orderStatus)) {            wrapper.eq("order_status",orderStatus);        }        if(!StringUtils.isEmpty(reserveDate)) {            wrapper.ge("reserve_date",reserveDate);        }        if(!StringUtils.isEmpty(createTimeBegin)) {            wrapper.ge("create_time",createTimeBegin);        }        if(!StringUtils.isEmpty(createTimeEnd)) {            wrapper.le("create_time",createTimeEnd);        }        //调用mapper的方法        IPage<OrderInfo> pages = baseMapper.selectPage(pageParam, wrapper);        //编号变成对应值封装        pages.getRecords().stream().forEach(item -> {            this.packOrderInfo(item);        });        return pages;    }    //根据订单id查询订单详情    @Override    public OrderInfo getOrderInfo(Long id) {        OrderInfo orderInfo = baseMapper.selectById(id);        return this.packOrderInfo(orderInfo);    }    private OrderInfo packOrderInfo(OrderInfo orderInfo) {        orderInfo.getParam().put("orderStatusString", OrderStatusEnum.getStatusNameByStatus(orderInfo.getOrderStatus()));        return orderInfo;    }    @Override    public Map<String, Object> show(Long orderId) {        Map<String, Object> map = new HashMap<>();        OrderInfo orderInfo = this.packOrderInfo(this.getById(orderId));        map.put("orderInfo", orderInfo);        Patient patient                =  patientFeignClient.getPatient(orderInfo.getPatientId());        map.put("patient", patient);        return map;    }    @Override    public Boolean cancelOrder(Long orderId) {        OrderInfo orderInfo = this.getById(orderId);        //当前时间大约退号时间，不能取消预约        DateTime quitTime = new DateTime(orderInfo.getQuitTime());        if(quitTime.isBeforeNow()) {            throw new YyghException(ResultCodeEnum.CANCEL_ORDER_NO);        }        SignInfoVo signInfoVo = hospitalFeignClient.getSignInfoVo(orderInfo.getHoscode());        if(null == signInfoVo) {            throw new YyghException(ResultCodeEnum.PARAM_ERROR);        }        Map<String, Object> reqMap = new HashMap<>();        reqMap.put("hoscode",orderInfo.getHoscode());        reqMap.put("hosRecordId",orderInfo.getHosRecordId());        reqMap.put("timestamp", HttpRequestHelper.getTimestamp());        reqMap.put("sign", MD5.encrypt(signInfoVo.getSignKey()));        JSONObject result = HttpRequestHelper.sendRequest(reqMap, signInfoVo.getApiUrl()+"/order/updateCancelStatus");        if(result.getInteger("code") != 200) {            throw new YyghException(result.getString("message"), ResultCodeEnum.FAIL.getCode());        } else {            //是否支付 退款            if(orderInfo.getOrderStatus().intValue() == OrderStatusEnum.PAID.getStatus().intValue()) {            //已支付 退款                boolean isRefund = weixinService.refund(orderId);                if(!isRefund) {                    throw new YyghException(ResultCodeEnum.CANCEL_ORDER_FAIL);                }            }            //更改订单状态            orderInfo.setOrderStatus(OrderStatusEnum.CANCLE.getStatus());            this.updateById(orderInfo);            //发送mq信息更新预约数 我们与下单成功更新预约数使用相同的mq信息，不设置可预约数与剩余预约数，接收端可预约数减1即可            OrderMqVo orderMqVo = new OrderMqVo();            orderMqVo.setScheduleId(orderInfo.getScheduleId());            //短信提示            MsmVo msmVo = new MsmVo();            msmVo.setPhone(orderInfo.getPatientPhone());            msmVo.setTemplateCode("SMS_194640722");//不设置自己的 要不然浪费信息            String reserveDate = new DateTime(orderInfo.getReserveDate()).toString("yyyy-MM-dd") + (orderInfo.getReserveTime()==0 ? "上午": "下午");            Map<String,Object> param = new HashMap<String,Object>(){{                put("title", orderInfo.getHosname()+"|"+orderInfo.getDepname()+"|"+orderInfo.getTitle());                put("reserveDate", reserveDate);                put("name", orderInfo.getPatientName());            }};            msmVo.setParam(param);            orderMqVo.setMsmVo(msmVo);            rabbitService.sendMessage(MqConst.EXCHANGE_DIRECT_ORDER, MqConst.ROUTING_ORDER, orderMqVo);        }        return true;    }    @Override    public void patientTips() {        QueryWrapper<OrderInfo> queryWrapper = new QueryWrapper<>();        queryWrapper.eq("reserve_date",new DateTime().toString("yyyy-MM-dd"));        List<OrderInfo> orderInfoList = baseMapper.selectList(queryWrapper);        for(OrderInfo orderInfo : orderInfoList) {            //短信提示            MsmVo msmVo = new MsmVo();            msmVo.setPhone(orderInfo.getPatientPhone());            String reserveDate = new DateTime(orderInfo.getReserveDate()).toString("yyyy-MM-dd") + (orderInfo.getReserveTime()==0 ? "上午": "下午");            Map<String,Object> param = new HashMap<String,Object>(){{                put("title", orderInfo.getHosname()+"|"+orderInfo.getDepname()+"|"+orderInfo.getTitle());                put("reserveDate", reserveDate);                put("name", orderInfo.getPatientName());            }};            msmVo.setParam(param);            rabbitService.sendMessage(MqConst.EXCHANGE_DIRECT_MSM, MqConst.ROUTING_MSM_ITEM, msmVo);        }    }    @Override    public Map<String, Object> getCountMap(OrderCountQueryVo orderCountQueryVo) {        Map<String, Object> map = new HashMap<>();        List<OrderCountVo> orderCountVoList                = baseMapper.selectOrderCount(orderCountQueryVo);        //日期列表        List<String> dateList                =orderCountVoList.stream().map(OrderCountVo::getReserveDate).collect(Collectors.toList());        //统计列表        List<Integer> countList                =orderCountVoList.stream().map(OrderCountVo::getCount).collect(Collectors.toList());        map.put("dateList", dateList);        map.put("countList", countList);        return map;    }}