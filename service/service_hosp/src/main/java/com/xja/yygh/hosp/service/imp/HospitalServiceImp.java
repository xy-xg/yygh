package com.xja.yygh.hosp.service.imp;import com.alibaba.fastjson.JSONObject;import com.xja.yygh.cmn.client.DictFeignClient;import com.xja.yygh.hosp.repository.HospitalRepository;import com.xja.yygh.hosp.service.HospitalService;import com.xja.yygh.model.hosp.Hospital;import com.xja.yygh.vo.hosp.HospitalQueryVo;import org.springframework.beans.BeanUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.domain.*;import org.springframework.stereotype.Service;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;/** * @Author xiaoYan * @Data 2022/12/10 11:21 * 时间不早了  注意休息 */@Servicepublic class HospitalServiceImp implements HospitalService {    @Autowired    private HospitalRepository hospitalRepository;    @Autowired    private DictFeignClient dictFeignClient;    @Override    public void save(Map<String, Object> stringObjectMap) {        //将map参数转为对象        String mapString = JSONObject.toJSONString(stringObjectMap);        Hospital hospital = JSONObject.parseObject(mapString, Hospital.class);        //判断是否存在数据        String hoscode = hospital.getHoscode();        Hospital hospitalByHoscode = hospitalRepository.getHospitalByHoscode(hoscode);        //如果存在 进行修改        if (hospitalByHoscode != null) {            hospital.setStatus(hospitalByHoscode.getStatus());            hospital.setStatus(hospitalByHoscode.getStatus());            hospital.setCreateTime(hospitalByHoscode.getCreateTime());            hospital.setUpdateTime(new Date());            hospital.setIsDeleted(0);            hospitalRepository.save(hospital);        }else {            //如果存储  进行修改            //0：未上线 1：已上线            hospital.setStatus(0);            hospital.setCreateTime(new Date());            hospital.setUpdateTime(new Date());            hospital.setIsDeleted(0);            hospitalRepository.save(hospital);        }    }    @Override    public Hospital getByHoscode(String hoscode) {        Hospital hospitalByHoscode = hospitalRepository.getHospitalByHoscode(hoscode);        return hospitalByHoscode;    }    @Override    public Page selectHospPage(Integer page, Integer limit, HospitalQueryVo hospitalQueryVo) {        //创建pageble对象  设置当前页和每页记录数        Pageable pageable = PageRequest.of(page-1,limit);        //创建Example对象        ExampleMatcher matcher = ExampleMatcher.matching()                .withStringMatcher(ExampleMatcher.StringMatcher.CONTAINING)                .withIgnoreCase(true);        //vo转为普通对象        Hospital hospital = new Hospital();        BeanUtils.copyProperties(hospitalQueryVo,hospital);        //创建对象        Example<Hospital> example = Example.of(hospital,matcher);        //调用        Page<Hospital> pageHosp = hospitalRepository.findAll(example, pageable);        //获取查询的list集合 遍历进行医院封装        pageHosp.getContent().stream().forEach(item ->{            this.setHospitalHosType(item);        });        return pageHosp;    }    //获取集合 遍历进行医院等级封装    private Hospital setHospitalHosType(Hospital hospital) {        //根据dictCode和value获取医院等级名称        String hostypeString = dictFeignClient.getName("Hostype", hospital.getHostype());            //查询省 市 地区        String province = dictFeignClient.getName(hospital.getProvinceCode());        String city = dictFeignClient.getName(hospital.getCityCode());        String district = dictFeignClient.getName(hospital.getDistrictCode());        hospital.getParam().put("fullAddress",province+city+district);        hospital.getParam().put("hostypeString",hostypeString);        return hospital;    }    //更新医院上线状态    @Override    public void updateStatus(String id, Integer status) {        //根据id查询医院设置        Hospital hospital = hospitalRepository.findById(id).get();        hospital.setStatus(status);        hospital.setUpdateTime(new Date());        hospitalRepository.save(hospital);    }    @Override    public Map<String, Object> getHospById(String id) {        Map<String, Object> result = new HashMap<>();        Hospital hospital1 = this.setHospitalHosType( hospitalRepository.findById(id).get());        result.put("bookingRule",hospital1.getBookingRule());        hospital1.setBookingRule(null);        //防止重复上传        result.put("hospital",hospital1);        return result;    }    @Override    public String getHospName(String hoscode) {        Hospital hospital = hospitalRepository.getHospitalByHoscode(hoscode);        if(null != hospital) {            return hospital.getHosname();        }        return "";    }    @Override    public List<Hospital> findByHosName(String hosname) {        return hospitalRepository.findHospitalByHosnameLike(hosname);    }    @Override    public Map<String, Object> item(String hoscode) {        Map<String, Object> result = new HashMap<>();        //医院详情        Hospital hospital = this.setHospitalHosType(this.getByHoscode(hoscode));        result.put("hospital", hospital);        //预约规则        result.put("bookingRule", hospital.getBookingRule());        //不需要重复返回        hospital.setBookingRule(null);        return result;    }}